
PongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000042c  00800100  000007c2  00000856  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080052c  0080052c  00000c82  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017c8  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa0  00000000  00000000  000025cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b3c  00000000  00000000  0000306c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000384  00000000  00000000  00003ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059f  00000000  00000000  00003f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001339  00000000  00000000  000044cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00005804  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	15 e0       	ldi	r17, 0x05	; 5
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 32       	cpi	r26, 0x2C	; 44
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	25 e0       	ldi	r18, 0x05	; 5
  8c:	ac e2       	ldi	r26, 0x2C	; 44
  8e:	b5 e0       	ldi	r27, 0x05	; 5
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 33       	cpi	r26, 0x32	; 50
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <main>
  9e:	0c 94 df 03 	jmp	0x7be	; 0x7be <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_command>:
	
	for (uint8_t i =0; i<5; i++ ) {
		buff[x + (line*128) ] = pgm_read_byte(font+(c*5)+i);
		x++;
	}
}
  a6:	5c 98       	cbi	0x0b, 4	; 11
  a8:	27 e0       	ldi	r18, 0x07	; 7
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	5d 98       	cbi	0x0b, 5	; 11
  b0:	ac 01       	movw	r20, r24
  b2:	02 2e       	mov	r0, r18
  b4:	02 c0       	rjmp	.+4      	; 0xba <lcd_command+0x14>
  b6:	55 95       	asr	r21
  b8:	47 95       	ror	r20
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <lcd_command+0x10>
  be:	40 ff       	sbrs	r20, 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <lcd_command+0x20>
  c2:	5e 9a       	sbi	0x0b, 6	; 11
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <lcd_command+0x22>
  c6:	5e 98       	cbi	0x0b, 6	; 11
  c8:	5d 9a       	sbi	0x0b, 5	; 11
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	31 09       	sbc	r19, r1
  ce:	78 f7       	brcc	.-34     	; 0xae <lcd_command+0x8>
  d0:	08 95       	ret

000000d2 <lcd_init>:
  d2:	56 9a       	sbi	0x0a, 6	; 10
  d4:	55 9a       	sbi	0x0a, 5	; 10
  d6:	54 9a       	sbi	0x0a, 4	; 10
  d8:	53 9a       	sbi	0x0a, 3	; 10
  da:	52 9a       	sbi	0x0a, 2	; 10
  dc:	5a 98       	cbi	0x0b, 2	; 11
  de:	5b 98       	cbi	0x0b, 3	; 11
  e0:	2f e9       	ldi	r18, 0x9F	; 159
  e2:	86 e8       	ldi	r24, 0x86	; 134
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <lcd_init+0x14>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <lcd_init+0x1e>
  f0:	00 00       	nop
  f2:	5b 9a       	sbi	0x0b, 3	; 11
  f4:	83 ea       	ldi	r24, 0xA3	; 163
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
  fa:	80 ea       	ldi	r24, 0xA0	; 160
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 100:	80 ec       	ldi	r24, 0xC0	; 192
 102:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 106:	80 e4       	ldi	r24, 0x40	; 64
 108:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 10c:	8c e2       	ldi	r24, 0x2C	; 44
 10e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 112:	83 ed       	ldi	r24, 0xD3	; 211
 114:	90 e3       	ldi	r25, 0x30	; 48
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_init+0x44>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <lcd_init+0x4a>
 11c:	00 00       	nop
 11e:	8e e2       	ldi	r24, 0x2E	; 46
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 124:	83 ed       	ldi	r24, 0xD3	; 211
 126:	90 e3       	ldi	r25, 0x30	; 48
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_init+0x56>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_init+0x5c>
 12e:	00 00       	nop
 130:	8f e2       	ldi	r24, 0x2F	; 47
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 136:	83 ec       	ldi	r24, 0xC3	; 195
 138:	99 e0       	ldi	r25, 0x09	; 9
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_init+0x68>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_init+0x6e>
 140:	00 00       	nop
 142:	86 e2       	ldi	r24, 0x26	; 38
 144:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 148:	08 95       	ret

0000014a <lcd_data>:
 14a:	5c 9a       	sbi	0x0b, 4	; 11
 14c:	27 e0       	ldi	r18, 0x07	; 7
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	5d 98       	cbi	0x0b, 5	; 11
 154:	ac 01       	movw	r20, r24
 156:	02 2e       	mov	r0, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <lcd_data+0x14>
 15a:	55 95       	asr	r21
 15c:	47 95       	ror	r20
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <lcd_data+0x10>
 162:	40 ff       	sbrs	r20, 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <lcd_data+0x20>
 166:	5e 9a       	sbi	0x0b, 6	; 11
 168:	01 c0       	rjmp	.+2      	; 0x16c <lcd_data+0x22>
 16a:	5e 98       	cbi	0x0b, 6	; 11
 16c:	5d 9a       	sbi	0x0b, 5	; 11
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	31 09       	sbc	r19, r1
 172:	78 f7       	brcc	.-34     	; 0x152 <lcd_data+0x8>
 174:	08 95       	ret

00000176 <lcd_set_brightness>:
 176:	cf 93       	push	r28
 178:	c8 2f       	mov	r28, r24
 17a:	81 e8       	ldi	r24, 0x81	; 129
 17c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 180:	8c 2f       	mov	r24, r28
 182:	8f 73       	andi	r24, 0x3F	; 63
 184:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <write_buffer>:
 18c:	cf 92       	push	r12
 18e:	df 92       	push	r13
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	0f 2e       	mov	r0, r31
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	ef 2e       	mov	r14, r31
 1a2:	f5 e0       	ldi	r31, 0x05	; 5
 1a4:	ff 2e       	mov	r15, r31
 1a6:	f0 2d       	mov	r31, r0
 1a8:	ec 01       	movw	r28, r24
 1aa:	0f 2e       	mov	r0, r31
 1ac:	f0 e1       	ldi	r31, 0x10	; 16
 1ae:	cf 2e       	mov	r12, r31
 1b0:	f5 e0       	ldi	r31, 0x05	; 5
 1b2:	df 2e       	mov	r13, r31
 1b4:	f0 2d       	mov	r31, r0
 1b6:	f7 01       	movw	r30, r14
 1b8:	80 81       	ld	r24, Z
 1ba:	f2 e0       	ldi	r31, 0x02	; 2
 1bc:	ef 0e       	add	r14, r31
 1be:	f1 1c       	adc	r15, r1
 1c0:	80 6b       	ori	r24, 0xB0	; 176
 1c2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1cc:	80 e1       	ldi	r24, 0x10	; 16
 1ce:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1d2:	80 ee       	ldi	r24, 0xE0	; 224
 1d4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_data>
 1de:	8e 01       	movw	r16, r28
 1e0:	00 58       	subi	r16, 0x80	; 128
 1e2:	1f 4f       	sbci	r17, 0xFF	; 255
 1e4:	89 91       	ld	r24, Y+
 1e6:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_data>
 1ea:	c0 17       	cp	r28, r16
 1ec:	d1 07       	cpc	r29, r17
 1ee:	d1 f7       	brne	.-12     	; 0x1e4 <write_buffer+0x58>
 1f0:	e8 01       	movw	r28, r16
 1f2:	ce 14       	cp	r12, r14
 1f4:	df 04       	cpc	r13, r15
 1f6:	f9 f6       	brne	.-66     	; 0x1b6 <write_buffer+0x2a>
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	ff 90       	pop	r15
 202:	ef 90       	pop	r14
 204:	df 90       	pop	r13
 206:	cf 90       	pop	r12
 208:	08 95       	ret

0000020a <clear_buffer>:
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	34 e0       	ldi	r19, 0x04	; 4
 20e:	fc 01       	movw	r30, r24
 210:	a9 01       	movw	r20, r18
 212:	11 92       	st	Z+, r1
 214:	41 50       	subi	r20, 0x01	; 1
 216:	50 40       	sbci	r21, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <clear_buffer+0x8>
 21a:	08 95       	ret

0000021c <setpixel>:


// the most basic function, set a single pixel
void setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) {
	uint8_t j = (7 - y % 8);
	buff[x + (y / 8 * 128)] |= 1<<j;
 21c:	24 2f       	mov	r18, r20
 21e:	26 95       	lsr	r18
 220:	26 95       	lsr	r18
 222:	26 95       	lsr	r18
 224:	e6 2f       	mov	r30, r22
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	30 e8       	ldi	r19, 0x80	; 128
 22a:	23 9f       	mul	r18, r19
 22c:	e0 0d       	add	r30, r0
 22e:	f1 1d       	adc	r31, r1
 230:	11 24       	eor	r1, r1
 232:	e8 0f       	add	r30, r24
 234:	f9 1f       	adc	r31, r25
 236:	40 95       	com	r20
 238:	47 70       	andi	r20, 0x07	; 7
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <setpixel+0x28>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	4a 95       	dec	r20
 246:	e2 f7       	brpl	.-8      	; 0x240 <setpixel+0x24>
 248:	90 81       	ld	r25, Z
 24a:	89 2b       	or	r24, r25
 24c:	80 83       	st	Z, r24
 24e:	08 95       	ret

00000250 <uart_putchar>:
void uart_init(void);

static FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
static FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

int uart_putchar(char c, FILE *stream) {
 250:	cf 93       	push	r28
 252:	c8 2f       	mov	r28, r24
	if (c == '\n') {
 254:	8a 30       	cpi	r24, 0x0A	; 10
 256:	19 f4       	brne	.+6      	; 0x25e <uart_putchar+0xe>
		uart_putchar('\r', stream);
 258:	8d e0       	ldi	r24, 0x0D	; 13
 25a:	0e 94 28 01 	call	0x250	; 0x250 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
 25e:	e0 ec       	ldi	r30, 0xC0	; 192
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	85 ff       	sbrs	r24, 5
 266:	fd cf       	rjmp	.-6      	; 0x262 <uart_putchar+0x12>
	UDR0 = c;
 268:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <uart_getchar>:

int uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
 274:	e0 ec       	ldi	r30, 0xC0	; 192
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	88 23       	and	r24, r24
 27c:	ec f7       	brge	.-6      	; 0x278 <uart_getchar+0x4>
	return UDR0;
 27e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	08 95       	ret

00000286 <uart_init>:

void uart_init(void) {
	UBRR0H = UBRRH_VALUE;
 286:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 28a:	87 e6       	ldi	r24, 0x67	; 103
 28c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
 290:	e0 ec       	ldi	r30, 0xC0	; 192
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	8d 7f       	andi	r24, 0xFD	; 253
 298:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
 29a:	86 e0       	ldi	r24, 0x06	; 6
 29c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
 2a0:	88 e1       	ldi	r24, 0x18	; 24
 2a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    // Redirect stdin and stdout so functions like printf and getchar work.
	stdout = &uart_output;
 2a6:	ec e2       	ldi	r30, 0x2C	; 44
 2a8:	f5 e0       	ldi	r31, 0x05	; 5
 2aa:	8e e1       	ldi	r24, 0x1E	; 30
 2ac:	95 e0       	ldi	r25, 0x05	; 5
 2ae:	93 83       	std	Z+3, r25	; 0x03
 2b0:	82 83       	std	Z+2, r24	; 0x02
	stdin = &uart_input;
 2b2:	80 e1       	ldi	r24, 0x10	; 16
 2b4:	95 e0       	ldi	r25, 0x05	; 5
 2b6:	91 83       	std	Z+1, r25	; 0x01
 2b8:	80 83       	st	Z, r24
 2ba:	08 95       	ret

000002bc <main>:



int main(void)
{
	uart_init();
 2bc:	0e 94 43 01 	call	0x286	; 0x286 <uart_init>
	//setting up the gpio for backlight
	DDRD |= 0x80;
 2c0:	57 9a       	sbi	0x0a, 7	; 10
	PORTD &= ~0x80;
 2c2:	5f 98       	cbi	0x0b, 7	; 11
	PORTD |= 0x00;
 2c4:	8b b1       	in	r24, 0x0b	; 11
 2c6:	8b b9       	out	0x0b, r24	; 11
	
	DDRB |= 0x05;
 2c8:	84 b1       	in	r24, 0x04	; 4
 2ca:	85 60       	ori	r24, 0x05	; 5
 2cc:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~0x05;
 2ce:	85 b1       	in	r24, 0x05	; 5
 2d0:	8a 7f       	andi	r24, 0xFA	; 250
 2d2:	85 b9       	out	0x05, r24	; 5
	PORTB |= 0x00;
 2d4:	85 b1       	in	r24, 0x05	; 5
 2d6:	85 b9       	out	0x05, r24	; 5
	
	
	setupADC();
 2d8:	0e 94 c2 01 	call	0x384	; 0x384 <setupADC>
	
	
	//lcd initialisation
	lcd_init();
 2dc:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_init>
	lcd_command(CMD_DISPLAY_ON);
 2e0:	8f ea       	ldi	r24, 0xAF	; 175
 2e2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
	lcd_set_brightness(0x18);
 2e6:	88 e1       	ldi	r24, 0x18	; 24
 2e8:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_set_brightness>
	write_buffer(buff);
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 c6 00 	call	0x18c	; 0x18c <write_buffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f4:	2f e7       	ldi	r18, 0x7F	; 127
 2f6:	84 e8       	ldi	r24, 0x84	; 132
 2f8:	9e e1       	ldi	r25, 0x1E	; 30
 2fa:	21 50       	subi	r18, 0x01	; 1
 2fc:	80 40       	sbci	r24, 0x00	; 0
 2fe:	90 40       	sbci	r25, 0x00	; 0
 300:	e1 f7       	brne	.-8      	; 0x2fa <main+0x3e>
 302:	00 c0       	rjmp	.+0      	; 0x304 <main+0x48>
 304:	00 00       	nop
	_delay_ms(10000);
	clear_buffer(buff);
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	0e 94 05 01 	call	0x20a	; 0x20a <clear_buffer>
		//touch_screenY();
		printf("%hu\n",m);
		*/
		
		
		while(!(detect()));
 30e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <detect>
 312:	89 2b       	or	r24, r25
 314:	e1 f3       	breq	.-8      	; 0x30e <main+0x52>
		x1 = touch_screenX();
 316:	0e 94 03 02 	call	0x406	; 0x406 <touch_screenX>
 31a:	ec 01       	movw	r28, r24
		y1 = touch_screenY();
 31c:	0e 94 27 02 	call	0x44e	; 0x44e <touch_screenY>
		m = 0.169 * x1 - 22.97;
		n = 0.12 * y1 - 36;
		setpixel(buff,m,n,BLACK);
 320:	bc 01       	movw	r22, r24
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__floatunsisf>
 32a:	2f e8       	ldi	r18, 0x8F	; 143
 32c:	32 ec       	ldi	r19, 0xC2	; 194
 32e:	45 ef       	ldi	r20, 0xF5	; 245
 330:	5d e3       	ldi	r21, 0x3D	; 61
 332:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
 336:	20 e0       	ldi	r18, 0x00	; 0
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	40 e1       	ldi	r20, 0x10	; 16
 33c:	52 e4       	ldi	r21, 0x42	; 66
 33e:	0e 94 48 02 	call	0x490	; 0x490 <__subsf3>
 342:	0e 94 b5 02 	call	0x56a	; 0x56a <__fixunssfsi>
 346:	16 2f       	mov	r17, r22
 348:	be 01       	movw	r22, r28
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__floatunsisf>
 352:	26 e5       	ldi	r18, 0x56	; 86
 354:	3e e0       	ldi	r19, 0x0E	; 14
 356:	4d e2       	ldi	r20, 0x2D	; 45
 358:	5e e3       	ldi	r21, 0x3E	; 62
 35a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
 35e:	2f e8       	ldi	r18, 0x8F	; 143
 360:	32 ec       	ldi	r19, 0xC2	; 194
 362:	47 eb       	ldi	r20, 0xB7	; 183
 364:	51 e4       	ldi	r21, 0x41	; 65
 366:	0e 94 48 02 	call	0x490	; 0x490 <__subsf3>
 36a:	0e 94 b5 02 	call	0x56a	; 0x56a <__fixunssfsi>
 36e:	21 e0       	ldi	r18, 0x01	; 1
 370:	41 2f       	mov	r20, r17
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	91 e0       	ldi	r25, 0x01	; 1
 376:	0e 94 0e 01 	call	0x21c	; 0x21c <setpixel>
		
		
		write_buffer(buff);
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	0e 94 c6 00 	call	0x18c	; 0x18c <write_buffer>
		//fillrect(buff,0,0,60,30,1);
		//drawrect(buff,0,0,60,30,1);
		//write_buffer(buff);
		//_delay_ms(5000);
		//displayChar++;
	}
 382:	c5 cf       	rjmp	.-118    	; 0x30e <main+0x52>

00000384 <setupADC>:
#include <stdio.h>
#include "Touchscreen.h"

void setupADC()
{
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));               //prescaler 128
 384:	ea e7       	ldi	r30, 0x7A	; 122
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	87 60       	ori	r24, 0x07	; 7
 38c:	80 83       	st	Z, r24
	//ADCSRA |= (1<<ADATE);                                       //ADC Auto Trigger Enable
	ADCSRA |= (1<<ADEN);                                        //ADC Enable
 38e:	80 81       	ld	r24, Z
 390:	80 68       	ori	r24, 0x80	; 128
 392:	80 83       	st	Z, r24
	ADCSRB &= ~((1<<ADTS2)|(1<<ADTS1)|(1<<ADTS0));              //ADC Auto Trigger Source Selections(free running mode)
 394:	eb e7       	ldi	r30, 0x7B	; 123
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	88 7f       	andi	r24, 0xF8	; 248
 39c:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);
 39e:	ec e7       	ldi	r30, 0x7C	; 124
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	80 64       	ori	r24, 0x40	; 64
 3a6:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
 3a8:	80 81       	ld	r24, Z
 3aa:	8f 77       	andi	r24, 0x7F	; 127
 3ac:	80 83       	st	Z, r24
 3ae:	08 95       	ret

000003b0 <detect>:
	
}

uint16_t detect(void)
{	
	ADMUX &= 0xF0;
 3b0:	ec e7       	ldi	r30, 0x7C	; 124
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	80 7f       	andi	r24, 0xF0	; 240
 3b8:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX1) | (1<<MUX0);
 3ba:	80 81       	ld	r24, Z
 3bc:	83 60       	ori	r24, 0x03	; 3
 3be:	80 83       	st	Z, r24
	
	DDRC &= 0xF0;
 3c0:	87 b1       	in	r24, 0x07	; 7
 3c2:	80 7f       	andi	r24, 0xF0	; 240
 3c4:	87 b9       	out	0x07, r24	; 7
	PORTC &= 0xF0;
 3c6:	88 b1       	in	r24, 0x08	; 8
 3c8:	80 7f       	andi	r24, 0xF0	; 240
 3ca:	88 b9       	out	0x08, r24	; 8
	
	DDRC |= (1<<DDC0) | (1<<DDC1);
 3cc:	87 b1       	in	r24, 0x07	; 7
 3ce:	83 60       	ori	r24, 0x03	; 3
 3d0:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1<<DDC2);
 3d2:	3a 98       	cbi	0x07, 2	; 7
	DDRC &= ~(1<<DDC3);
 3d4:	3b 98       	cbi	0x07, 3	; 7
	PORTC &= ~(1<<DDC0);
 3d6:	40 98       	cbi	0x08, 0	; 8
	PORTC &= ~(1<<DDC1);
 3d8:	41 98       	cbi	0x08, 1	; 8
	PORTC &= ~(1<<DDC2);
 3da:	42 98       	cbi	0x08, 2	; 8
	PORTC |= (1<<DDC3);
 3dc:	43 9a       	sbi	0x08, 3	; 8
	
	ADCSRA |= (1<<ADSC);
 3de:	ea e7       	ldi	r30, 0x7A	; 122
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	80 81       	ld	r24, Z
 3e4:	80 64       	ori	r24, 0x40	; 64
 3e6:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));
 3e8:	80 81       	ld	r24, Z
 3ea:	86 fd       	sbrc	r24, 6
 3ec:	fd cf       	rjmp	.-6      	; 0x3e8 <detect+0x38>
	
	return ADC<500;
 3ee:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 3f2:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	24 3f       	cpi	r18, 0xF4	; 244
 3fc:	31 40       	sbci	r19, 0x01	; 1
 3fe:	10 f0       	brcs	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	90 e0       	ldi	r25, 0x00	; 0
	
}
 404:	08 95       	ret

00000406 <touch_screenX>:

uint16_t touch_screenX(void)
{	
	ADMUX &= 0xF0;
 406:	ec e7       	ldi	r30, 0x7C	; 124
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	80 7f       	andi	r24, 0xF0	; 240
 40e:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX1);
 410:	80 81       	ld	r24, Z
 412:	82 60       	ori	r24, 0x02	; 2
 414:	80 83       	st	Z, r24
	
	DDRC &= 0xF0;
 416:	87 b1       	in	r24, 0x07	; 7
 418:	80 7f       	andi	r24, 0xF0	; 240
 41a:	87 b9       	out	0x07, r24	; 7
	PORTC &= 0xF0;
 41c:	88 b1       	in	r24, 0x08	; 8
 41e:	80 7f       	andi	r24, 0xF0	; 240
 420:	88 b9       	out	0x08, r24	; 8
	
	DDRC |= ((1<<DDC0) | (1<<DDC1));
 422:	87 b1       	in	r24, 0x07	; 7
 424:	83 60       	ori	r24, 0x03	; 3
 426:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1<<DDC2);
 428:	3a 98       	cbi	0x07, 2	; 7
	DDRC &= ~(1<<DDC3);
 42a:	3b 98       	cbi	0x07, 3	; 7
	PORTC &= ~(1<<PORTC2);
 42c:	42 98       	cbi	0x08, 2	; 8
	PORTC &= ~(1<<PORTC3);
 42e:	43 98       	cbi	0x08, 3	; 8
	PORTC |= (1<<PORTC0);
 430:	40 9a       	sbi	0x08, 0	; 8
	PORTC &= ~(1<<PORTC1);
 432:	41 98       	cbi	0x08, 1	; 8
	
	ADCSRA |= (1<<ADSC);
 434:	ea e7       	ldi	r30, 0x7A	; 122
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	80 64       	ori	r24, 0x40	; 64
 43c:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));
 43e:	80 81       	ld	r24, Z
 440:	86 fd       	sbrc	r24, 6
 442:	fd cf       	rjmp	.-6      	; 0x43e <touch_screenX+0x38>
	
	return ADC;
 444:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 448:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 44c:	08 95       	ret

0000044e <touch_screenY>:
uint16_t touch_screenY(void)
{
	ADMUX &= 0xF0;
 44e:	ec e7       	ldi	r30, 0x7C	; 124
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	80 7f       	andi	r24, 0xF0	; 240
 456:	80 83       	st	Z, r24
	
	DDRC &= 0xF0;
 458:	87 b1       	in	r24, 0x07	; 7
 45a:	80 7f       	andi	r24, 0xF0	; 240
 45c:	87 b9       	out	0x07, r24	; 7
	PORTC &= 0xF0;
 45e:	88 b1       	in	r24, 0x08	; 8
 460:	80 7f       	andi	r24, 0xF0	; 240
 462:	88 b9       	out	0x08, r24	; 8
	
	DDRC |= ((1<<DDC2) | (1<<DDC3));
 464:	87 b1       	in	r24, 0x07	; 7
 466:	8c 60       	ori	r24, 0x0C	; 12
 468:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1<<DDC0);
 46a:	38 98       	cbi	0x07, 0	; 7
	DDRC &= ~(1<<DDC1);
 46c:	39 98       	cbi	0x07, 1	; 7
	PORTC &= ~(1<<PORTC0);
 46e:	40 98       	cbi	0x08, 0	; 8
	PORTC &= ~(1<<PORTC1);
 470:	41 98       	cbi	0x08, 1	; 8
	PORTC |= (1<<PORTC2);
 472:	42 9a       	sbi	0x08, 2	; 8
	PORTC &= ~(1<<PORTC3);
 474:	43 98       	cbi	0x08, 3	; 8
	
	ADCSRA |= (1<<ADSC);
 476:	ea e7       	ldi	r30, 0x7A	; 122
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	80 64       	ori	r24, 0x40	; 64
 47e:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));
 480:	80 81       	ld	r24, Z
 482:	86 fd       	sbrc	r24, 6
 484:	fd cf       	rjmp	.-6      	; 0x480 <touch_screenY+0x32>
	return ADC;
 486:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 48a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 48e:	08 95       	ret

00000490 <__subsf3>:
 490:	50 58       	subi	r21, 0x80	; 128

00000492 <__addsf3>:
 492:	bb 27       	eor	r27, r27
 494:	aa 27       	eor	r26, r26
 496:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__addsf3x>
 49a:	0c 94 38 03 	jmp	0x670	; 0x670 <__fp_round>
 49e:	0e 94 2a 03 	call	0x654	; 0x654 <__fp_pscA>
 4a2:	38 f0       	brcs	.+14     	; 0x4b2 <__addsf3+0x20>
 4a4:	0e 94 31 03 	call	0x662	; 0x662 <__fp_pscB>
 4a8:	20 f0       	brcs	.+8      	; 0x4b2 <__addsf3+0x20>
 4aa:	39 f4       	brne	.+14     	; 0x4ba <__addsf3+0x28>
 4ac:	9f 3f       	cpi	r25, 0xFF	; 255
 4ae:	19 f4       	brne	.+6      	; 0x4b6 <__addsf3+0x24>
 4b0:	26 f4       	brtc	.+8      	; 0x4ba <__addsf3+0x28>
 4b2:	0c 94 27 03 	jmp	0x64e	; 0x64e <__fp_nan>
 4b6:	0e f4       	brtc	.+2      	; 0x4ba <__addsf3+0x28>
 4b8:	e0 95       	com	r30
 4ba:	e7 fb       	bst	r30, 7
 4bc:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_inf>

000004c0 <__addsf3x>:
 4c0:	e9 2f       	mov	r30, r25
 4c2:	0e 94 49 03 	call	0x692	; 0x692 <__fp_split3>
 4c6:	58 f3       	brcs	.-42     	; 0x49e <__addsf3+0xc>
 4c8:	ba 17       	cp	r27, r26
 4ca:	62 07       	cpc	r22, r18
 4cc:	73 07       	cpc	r23, r19
 4ce:	84 07       	cpc	r24, r20
 4d0:	95 07       	cpc	r25, r21
 4d2:	20 f0       	brcs	.+8      	; 0x4dc <__addsf3x+0x1c>
 4d4:	79 f4       	brne	.+30     	; 0x4f4 <__addsf3x+0x34>
 4d6:	a6 f5       	brtc	.+104    	; 0x540 <__addsf3x+0x80>
 4d8:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__fp_zero>
 4dc:	0e f4       	brtc	.+2      	; 0x4e0 <__addsf3x+0x20>
 4de:	e0 95       	com	r30
 4e0:	0b 2e       	mov	r0, r27
 4e2:	ba 2f       	mov	r27, r26
 4e4:	a0 2d       	mov	r26, r0
 4e6:	0b 01       	movw	r0, r22
 4e8:	b9 01       	movw	r22, r18
 4ea:	90 01       	movw	r18, r0
 4ec:	0c 01       	movw	r0, r24
 4ee:	ca 01       	movw	r24, r20
 4f0:	a0 01       	movw	r20, r0
 4f2:	11 24       	eor	r1, r1
 4f4:	ff 27       	eor	r31, r31
 4f6:	59 1b       	sub	r21, r25
 4f8:	99 f0       	breq	.+38     	; 0x520 <__addsf3x+0x60>
 4fa:	59 3f       	cpi	r21, 0xF9	; 249
 4fc:	50 f4       	brcc	.+20     	; 0x512 <__addsf3x+0x52>
 4fe:	50 3e       	cpi	r21, 0xE0	; 224
 500:	68 f1       	brcs	.+90     	; 0x55c <__addsf3x+0x9c>
 502:	1a 16       	cp	r1, r26
 504:	f0 40       	sbci	r31, 0x00	; 0
 506:	a2 2f       	mov	r26, r18
 508:	23 2f       	mov	r18, r19
 50a:	34 2f       	mov	r19, r20
 50c:	44 27       	eor	r20, r20
 50e:	58 5f       	subi	r21, 0xF8	; 248
 510:	f3 cf       	rjmp	.-26     	; 0x4f8 <__addsf3x+0x38>
 512:	46 95       	lsr	r20
 514:	37 95       	ror	r19
 516:	27 95       	ror	r18
 518:	a7 95       	ror	r26
 51a:	f0 40       	sbci	r31, 0x00	; 0
 51c:	53 95       	inc	r21
 51e:	c9 f7       	brne	.-14     	; 0x512 <__addsf3x+0x52>
 520:	7e f4       	brtc	.+30     	; 0x540 <__addsf3x+0x80>
 522:	1f 16       	cp	r1, r31
 524:	ba 0b       	sbc	r27, r26
 526:	62 0b       	sbc	r22, r18
 528:	73 0b       	sbc	r23, r19
 52a:	84 0b       	sbc	r24, r20
 52c:	ba f0       	brmi	.+46     	; 0x55c <__addsf3x+0x9c>
 52e:	91 50       	subi	r25, 0x01	; 1
 530:	a1 f0       	breq	.+40     	; 0x55a <__addsf3x+0x9a>
 532:	ff 0f       	add	r31, r31
 534:	bb 1f       	adc	r27, r27
 536:	66 1f       	adc	r22, r22
 538:	77 1f       	adc	r23, r23
 53a:	88 1f       	adc	r24, r24
 53c:	c2 f7       	brpl	.-16     	; 0x52e <__addsf3x+0x6e>
 53e:	0e c0       	rjmp	.+28     	; 0x55c <__addsf3x+0x9c>
 540:	ba 0f       	add	r27, r26
 542:	62 1f       	adc	r22, r18
 544:	73 1f       	adc	r23, r19
 546:	84 1f       	adc	r24, r20
 548:	48 f4       	brcc	.+18     	; 0x55c <__addsf3x+0x9c>
 54a:	87 95       	ror	r24
 54c:	77 95       	ror	r23
 54e:	67 95       	ror	r22
 550:	b7 95       	ror	r27
 552:	f7 95       	ror	r31
 554:	9e 3f       	cpi	r25, 0xFE	; 254
 556:	08 f0       	brcs	.+2      	; 0x55a <__addsf3x+0x9a>
 558:	b0 cf       	rjmp	.-160    	; 0x4ba <__addsf3+0x28>
 55a:	93 95       	inc	r25
 55c:	88 0f       	add	r24, r24
 55e:	08 f0       	brcs	.+2      	; 0x562 <__addsf3x+0xa2>
 560:	99 27       	eor	r25, r25
 562:	ee 0f       	add	r30, r30
 564:	97 95       	ror	r25
 566:	87 95       	ror	r24
 568:	08 95       	ret

0000056a <__fixunssfsi>:
 56a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__fp_splitA>
 56e:	88 f0       	brcs	.+34     	; 0x592 <__fixunssfsi+0x28>
 570:	9f 57       	subi	r25, 0x7F	; 127
 572:	98 f0       	brcs	.+38     	; 0x59a <__fixunssfsi+0x30>
 574:	b9 2f       	mov	r27, r25
 576:	99 27       	eor	r25, r25
 578:	b7 51       	subi	r27, 0x17	; 23
 57a:	b0 f0       	brcs	.+44     	; 0x5a8 <__fixunssfsi+0x3e>
 57c:	e1 f0       	breq	.+56     	; 0x5b6 <__fixunssfsi+0x4c>
 57e:	66 0f       	add	r22, r22
 580:	77 1f       	adc	r23, r23
 582:	88 1f       	adc	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	1a f0       	brmi	.+6      	; 0x58e <__fixunssfsi+0x24>
 588:	ba 95       	dec	r27
 58a:	c9 f7       	brne	.-14     	; 0x57e <__fixunssfsi+0x14>
 58c:	14 c0       	rjmp	.+40     	; 0x5b6 <__fixunssfsi+0x4c>
 58e:	b1 30       	cpi	r27, 0x01	; 1
 590:	91 f0       	breq	.+36     	; 0x5b6 <__fixunssfsi+0x4c>
 592:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__fp_zero>
 596:	b1 e0       	ldi	r27, 0x01	; 1
 598:	08 95       	ret
 59a:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__fp_zero>
 59e:	67 2f       	mov	r22, r23
 5a0:	78 2f       	mov	r23, r24
 5a2:	88 27       	eor	r24, r24
 5a4:	b8 5f       	subi	r27, 0xF8	; 248
 5a6:	39 f0       	breq	.+14     	; 0x5b6 <__fixunssfsi+0x4c>
 5a8:	b9 3f       	cpi	r27, 0xF9	; 249
 5aa:	cc f3       	brlt	.-14     	; 0x59e <__fixunssfsi+0x34>
 5ac:	86 95       	lsr	r24
 5ae:	77 95       	ror	r23
 5b0:	67 95       	ror	r22
 5b2:	b3 95       	inc	r27
 5b4:	d9 f7       	brne	.-10     	; 0x5ac <__fixunssfsi+0x42>
 5b6:	3e f4       	brtc	.+14     	; 0x5c6 <__fixunssfsi+0x5c>
 5b8:	90 95       	com	r25
 5ba:	80 95       	com	r24
 5bc:	70 95       	com	r23
 5be:	61 95       	neg	r22
 5c0:	7f 4f       	sbci	r23, 0xFF	; 255
 5c2:	8f 4f       	sbci	r24, 0xFF	; 255
 5c4:	9f 4f       	sbci	r25, 0xFF	; 255
 5c6:	08 95       	ret

000005c8 <__floatunsisf>:
 5c8:	e8 94       	clt
 5ca:	09 c0       	rjmp	.+18     	; 0x5de <__floatsisf+0x12>

000005cc <__floatsisf>:
 5cc:	97 fb       	bst	r25, 7
 5ce:	3e f4       	brtc	.+14     	; 0x5de <__floatsisf+0x12>
 5d0:	90 95       	com	r25
 5d2:	80 95       	com	r24
 5d4:	70 95       	com	r23
 5d6:	61 95       	neg	r22
 5d8:	7f 4f       	sbci	r23, 0xFF	; 255
 5da:	8f 4f       	sbci	r24, 0xFF	; 255
 5dc:	9f 4f       	sbci	r25, 0xFF	; 255
 5de:	99 23       	and	r25, r25
 5e0:	a9 f0       	breq	.+42     	; 0x60c <__floatsisf+0x40>
 5e2:	f9 2f       	mov	r31, r25
 5e4:	96 e9       	ldi	r25, 0x96	; 150
 5e6:	bb 27       	eor	r27, r27
 5e8:	93 95       	inc	r25
 5ea:	f6 95       	lsr	r31
 5ec:	87 95       	ror	r24
 5ee:	77 95       	ror	r23
 5f0:	67 95       	ror	r22
 5f2:	b7 95       	ror	r27
 5f4:	f1 11       	cpse	r31, r1
 5f6:	f8 cf       	rjmp	.-16     	; 0x5e8 <__floatsisf+0x1c>
 5f8:	fa f4       	brpl	.+62     	; 0x638 <__floatsisf+0x6c>
 5fa:	bb 0f       	add	r27, r27
 5fc:	11 f4       	brne	.+4      	; 0x602 <__floatsisf+0x36>
 5fe:	60 ff       	sbrs	r22, 0
 600:	1b c0       	rjmp	.+54     	; 0x638 <__floatsisf+0x6c>
 602:	6f 5f       	subi	r22, 0xFF	; 255
 604:	7f 4f       	sbci	r23, 0xFF	; 255
 606:	8f 4f       	sbci	r24, 0xFF	; 255
 608:	9f 4f       	sbci	r25, 0xFF	; 255
 60a:	16 c0       	rjmp	.+44     	; 0x638 <__floatsisf+0x6c>
 60c:	88 23       	and	r24, r24
 60e:	11 f0       	breq	.+4      	; 0x614 <__floatsisf+0x48>
 610:	96 e9       	ldi	r25, 0x96	; 150
 612:	11 c0       	rjmp	.+34     	; 0x636 <__floatsisf+0x6a>
 614:	77 23       	and	r23, r23
 616:	21 f0       	breq	.+8      	; 0x620 <__floatsisf+0x54>
 618:	9e e8       	ldi	r25, 0x8E	; 142
 61a:	87 2f       	mov	r24, r23
 61c:	76 2f       	mov	r23, r22
 61e:	05 c0       	rjmp	.+10     	; 0x62a <__floatsisf+0x5e>
 620:	66 23       	and	r22, r22
 622:	71 f0       	breq	.+28     	; 0x640 <__floatsisf+0x74>
 624:	96 e8       	ldi	r25, 0x86	; 134
 626:	86 2f       	mov	r24, r22
 628:	70 e0       	ldi	r23, 0x00	; 0
 62a:	60 e0       	ldi	r22, 0x00	; 0
 62c:	2a f0       	brmi	.+10     	; 0x638 <__floatsisf+0x6c>
 62e:	9a 95       	dec	r25
 630:	66 0f       	add	r22, r22
 632:	77 1f       	adc	r23, r23
 634:	88 1f       	adc	r24, r24
 636:	da f7       	brpl	.-10     	; 0x62e <__floatsisf+0x62>
 638:	88 0f       	add	r24, r24
 63a:	96 95       	lsr	r25
 63c:	87 95       	ror	r24
 63e:	97 f9       	bld	r25, 7
 640:	08 95       	ret

00000642 <__fp_inf>:
 642:	97 f9       	bld	r25, 7
 644:	9f 67       	ori	r25, 0x7F	; 127
 646:	80 e8       	ldi	r24, 0x80	; 128
 648:	70 e0       	ldi	r23, 0x00	; 0
 64a:	60 e0       	ldi	r22, 0x00	; 0
 64c:	08 95       	ret

0000064e <__fp_nan>:
 64e:	9f ef       	ldi	r25, 0xFF	; 255
 650:	80 ec       	ldi	r24, 0xC0	; 192
 652:	08 95       	ret

00000654 <__fp_pscA>:
 654:	00 24       	eor	r0, r0
 656:	0a 94       	dec	r0
 658:	16 16       	cp	r1, r22
 65a:	17 06       	cpc	r1, r23
 65c:	18 06       	cpc	r1, r24
 65e:	09 06       	cpc	r0, r25
 660:	08 95       	ret

00000662 <__fp_pscB>:
 662:	00 24       	eor	r0, r0
 664:	0a 94       	dec	r0
 666:	12 16       	cp	r1, r18
 668:	13 06       	cpc	r1, r19
 66a:	14 06       	cpc	r1, r20
 66c:	05 06       	cpc	r0, r21
 66e:	08 95       	ret

00000670 <__fp_round>:
 670:	09 2e       	mov	r0, r25
 672:	03 94       	inc	r0
 674:	00 0c       	add	r0, r0
 676:	11 f4       	brne	.+4      	; 0x67c <__fp_round+0xc>
 678:	88 23       	and	r24, r24
 67a:	52 f0       	brmi	.+20     	; 0x690 <__fp_round+0x20>
 67c:	bb 0f       	add	r27, r27
 67e:	40 f4       	brcc	.+16     	; 0x690 <__fp_round+0x20>
 680:	bf 2b       	or	r27, r31
 682:	11 f4       	brne	.+4      	; 0x688 <__fp_round+0x18>
 684:	60 ff       	sbrs	r22, 0
 686:	04 c0       	rjmp	.+8      	; 0x690 <__fp_round+0x20>
 688:	6f 5f       	subi	r22, 0xFF	; 255
 68a:	7f 4f       	sbci	r23, 0xFF	; 255
 68c:	8f 4f       	sbci	r24, 0xFF	; 255
 68e:	9f 4f       	sbci	r25, 0xFF	; 255
 690:	08 95       	ret

00000692 <__fp_split3>:
 692:	57 fd       	sbrc	r21, 7
 694:	90 58       	subi	r25, 0x80	; 128
 696:	44 0f       	add	r20, r20
 698:	55 1f       	adc	r21, r21
 69a:	59 f0       	breq	.+22     	; 0x6b2 <__fp_splitA+0x10>
 69c:	5f 3f       	cpi	r21, 0xFF	; 255
 69e:	71 f0       	breq	.+28     	; 0x6bc <__fp_splitA+0x1a>
 6a0:	47 95       	ror	r20

000006a2 <__fp_splitA>:
 6a2:	88 0f       	add	r24, r24
 6a4:	97 fb       	bst	r25, 7
 6a6:	99 1f       	adc	r25, r25
 6a8:	61 f0       	breq	.+24     	; 0x6c2 <__fp_splitA+0x20>
 6aa:	9f 3f       	cpi	r25, 0xFF	; 255
 6ac:	79 f0       	breq	.+30     	; 0x6cc <__fp_splitA+0x2a>
 6ae:	87 95       	ror	r24
 6b0:	08 95       	ret
 6b2:	12 16       	cp	r1, r18
 6b4:	13 06       	cpc	r1, r19
 6b6:	14 06       	cpc	r1, r20
 6b8:	55 1f       	adc	r21, r21
 6ba:	f2 cf       	rjmp	.-28     	; 0x6a0 <__fp_split3+0xe>
 6bc:	46 95       	lsr	r20
 6be:	f1 df       	rcall	.-30     	; 0x6a2 <__fp_splitA>
 6c0:	08 c0       	rjmp	.+16     	; 0x6d2 <__fp_splitA+0x30>
 6c2:	16 16       	cp	r1, r22
 6c4:	17 06       	cpc	r1, r23
 6c6:	18 06       	cpc	r1, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	f1 cf       	rjmp	.-30     	; 0x6ae <__fp_splitA+0xc>
 6cc:	86 95       	lsr	r24
 6ce:	71 05       	cpc	r23, r1
 6d0:	61 05       	cpc	r22, r1
 6d2:	08 94       	sec
 6d4:	08 95       	ret

000006d6 <__fp_zero>:
 6d6:	e8 94       	clt

000006d8 <__fp_szero>:
 6d8:	bb 27       	eor	r27, r27
 6da:	66 27       	eor	r22, r22
 6dc:	77 27       	eor	r23, r23
 6de:	cb 01       	movw	r24, r22
 6e0:	97 f9       	bld	r25, 7
 6e2:	08 95       	ret

000006e4 <__mulsf3>:
 6e4:	0e 94 85 03 	call	0x70a	; 0x70a <__mulsf3x>
 6e8:	0c 94 38 03 	jmp	0x670	; 0x670 <__fp_round>
 6ec:	0e 94 2a 03 	call	0x654	; 0x654 <__fp_pscA>
 6f0:	38 f0       	brcs	.+14     	; 0x700 <__mulsf3+0x1c>
 6f2:	0e 94 31 03 	call	0x662	; 0x662 <__fp_pscB>
 6f6:	20 f0       	brcs	.+8      	; 0x700 <__mulsf3+0x1c>
 6f8:	95 23       	and	r25, r21
 6fa:	11 f0       	breq	.+4      	; 0x700 <__mulsf3+0x1c>
 6fc:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_inf>
 700:	0c 94 27 03 	jmp	0x64e	; 0x64e <__fp_nan>
 704:	11 24       	eor	r1, r1
 706:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__fp_szero>

0000070a <__mulsf3x>:
 70a:	0e 94 49 03 	call	0x692	; 0x692 <__fp_split3>
 70e:	70 f3       	brcs	.-36     	; 0x6ec <__mulsf3+0x8>

00000710 <__mulsf3_pse>:
 710:	95 9f       	mul	r25, r21
 712:	c1 f3       	breq	.-16     	; 0x704 <__mulsf3+0x20>
 714:	95 0f       	add	r25, r21
 716:	50 e0       	ldi	r21, 0x00	; 0
 718:	55 1f       	adc	r21, r21
 71a:	62 9f       	mul	r22, r18
 71c:	f0 01       	movw	r30, r0
 71e:	72 9f       	mul	r23, r18
 720:	bb 27       	eor	r27, r27
 722:	f0 0d       	add	r31, r0
 724:	b1 1d       	adc	r27, r1
 726:	63 9f       	mul	r22, r19
 728:	aa 27       	eor	r26, r26
 72a:	f0 0d       	add	r31, r0
 72c:	b1 1d       	adc	r27, r1
 72e:	aa 1f       	adc	r26, r26
 730:	64 9f       	mul	r22, r20
 732:	66 27       	eor	r22, r22
 734:	b0 0d       	add	r27, r0
 736:	a1 1d       	adc	r26, r1
 738:	66 1f       	adc	r22, r22
 73a:	82 9f       	mul	r24, r18
 73c:	22 27       	eor	r18, r18
 73e:	b0 0d       	add	r27, r0
 740:	a1 1d       	adc	r26, r1
 742:	62 1f       	adc	r22, r18
 744:	73 9f       	mul	r23, r19
 746:	b0 0d       	add	r27, r0
 748:	a1 1d       	adc	r26, r1
 74a:	62 1f       	adc	r22, r18
 74c:	83 9f       	mul	r24, r19
 74e:	a0 0d       	add	r26, r0
 750:	61 1d       	adc	r22, r1
 752:	22 1f       	adc	r18, r18
 754:	74 9f       	mul	r23, r20
 756:	33 27       	eor	r19, r19
 758:	a0 0d       	add	r26, r0
 75a:	61 1d       	adc	r22, r1
 75c:	23 1f       	adc	r18, r19
 75e:	84 9f       	mul	r24, r20
 760:	60 0d       	add	r22, r0
 762:	21 1d       	adc	r18, r1
 764:	82 2f       	mov	r24, r18
 766:	76 2f       	mov	r23, r22
 768:	6a 2f       	mov	r22, r26
 76a:	11 24       	eor	r1, r1
 76c:	9f 57       	subi	r25, 0x7F	; 127
 76e:	50 40       	sbci	r21, 0x00	; 0
 770:	9a f0       	brmi	.+38     	; 0x798 <__mulsf3_pse+0x88>
 772:	f1 f0       	breq	.+60     	; 0x7b0 <__mulsf3_pse+0xa0>
 774:	88 23       	and	r24, r24
 776:	4a f0       	brmi	.+18     	; 0x78a <__mulsf3_pse+0x7a>
 778:	ee 0f       	add	r30, r30
 77a:	ff 1f       	adc	r31, r31
 77c:	bb 1f       	adc	r27, r27
 77e:	66 1f       	adc	r22, r22
 780:	77 1f       	adc	r23, r23
 782:	88 1f       	adc	r24, r24
 784:	91 50       	subi	r25, 0x01	; 1
 786:	50 40       	sbci	r21, 0x00	; 0
 788:	a9 f7       	brne	.-22     	; 0x774 <__mulsf3_pse+0x64>
 78a:	9e 3f       	cpi	r25, 0xFE	; 254
 78c:	51 05       	cpc	r21, r1
 78e:	80 f0       	brcs	.+32     	; 0x7b0 <__mulsf3_pse+0xa0>
 790:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_inf>
 794:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__fp_szero>
 798:	5f 3f       	cpi	r21, 0xFF	; 255
 79a:	e4 f3       	brlt	.-8      	; 0x794 <__mulsf3_pse+0x84>
 79c:	98 3e       	cpi	r25, 0xE8	; 232
 79e:	d4 f3       	brlt	.-12     	; 0x794 <__mulsf3_pse+0x84>
 7a0:	86 95       	lsr	r24
 7a2:	77 95       	ror	r23
 7a4:	67 95       	ror	r22
 7a6:	b7 95       	ror	r27
 7a8:	f7 95       	ror	r31
 7aa:	e7 95       	ror	r30
 7ac:	9f 5f       	subi	r25, 0xFF	; 255
 7ae:	c1 f7       	brne	.-16     	; 0x7a0 <__mulsf3_pse+0x90>
 7b0:	fe 2b       	or	r31, r30
 7b2:	88 0f       	add	r24, r24
 7b4:	91 1d       	adc	r25, r1
 7b6:	96 95       	lsr	r25
 7b8:	87 95       	ror	r24
 7ba:	97 f9       	bld	r25, 7
 7bc:	08 95       	ret

000007be <_exit>:
 7be:	f8 94       	cli

000007c0 <__stop_program>:
 7c0:	ff cf       	rjmp	.-2      	; 0x7c0 <__stop_program>
